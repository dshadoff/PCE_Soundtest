; Small C HuC6280 (v0.2, 08/Nov/97)
;
; Taken to HuC (22/Feb/00)
;
;
; This file generated by HuC (v3.99-d245a7c9-dirty, 2021-02-06)
; on Sun Jul 18 20:39:48 2021
;

HUC	= 1
                                                                           
DEPRECATED	= 1

	.include "startup.asm"
	.data
	.bank DATA_BANK

	.code

;/*
; *
; * beep - try to manipulate the 4 settings for volume in order to see
; *        which ones (or whether all) cause a "pop" style volume spike
; *
;*/
;#include "huc.h"
;/*
; * backup ram defines
; */
;#define  BM_OK             0
;#define  BM_NOT_FOUND      1
;#define  BM_BAD_CHECKSUM   2
;#define  BM_DIR_CORRUPTED  3
;#define  BM_FILE_EMPTY     4
;#define  BM_FULL           5
;#define  BM_NOT_FORMATED   0xFF
;#define  BRAM_STARTPTR     0x8010
;/*
; * sprite defines
; */
;#define  FLIP_X_MASK 0x08
;#define  FLIP_Y_MASK 0x80
;#define  FLIP_MAS   0x88
;#define  SIZE_MAS   0x31
;#define  NO_FLIP    0x00
;#define  NO_FLIP_X  0x00
;#define  NO_FLIP_Y  0x00
;#define  FLIP_X     0x08
;#define  FLIP_Y     0x80
;#define  SZ_16x16   0x00
;#define  SZ_16x32   0x10
;#define  SZ_16x64   0x30
;#define  SZ_32x16   0x01
;#define  SZ_32x32   0x11
;#define  SZ_32x64   0x31
;/*
; * joypad defines
; */
;#define	JOY_A		0x01
;#define	JOY_I		0x01
;#define	JOY_B		0x02
;#define	JOY_II		0x02
;#define	JOY_SLCT	0x04
;#define	JOY_SEL		0x04
;#define	JOY_STRT	0x08
;#define	JOY_RUN		0x08
;#define	JOY_UP		0x10
;#define	JOY_RGHT	0x20
;#define	JOY_RIGHT	0x20
;#define	JOY_DOWN	0x40
;#define	JOY_LEFT	0x80
;#define	JOY_C		0x0100
;#define	JOY_III		0x0100
;#define	JOY_D		0x0200
;#define	JOY_IV		0x0200
;#define	JOY_E		0x0400
;#define	JOY_V		0x0400
;#define	JOY_F		0x0800
;#define	JOY_VI		0x0800
;#define JOY_SIXBUT	0x5000
;#define JOY_TYPE6	0x5000
;/*
; * screen defines
; */
;#define	SCR_SIZE_32x32	0
;#define	SCR_SIZE_64x32	1
;#define	SCR_SIZE_128x32	3
;#define	SCR_SIZE_32x64	4
;#define	SCR_SIZE_64x64	5
;#define	SCR_SIZE_128x64	7
;#define	XRES_SHARP	0
;#define	XRES_SOFT	4
;/*
; * CD defines
; */
;#define	CDPLAY_MUTE		0
;#define	CDPLAY_REPEAT		1
;#define	CDPLAY_NORMAL		2
;#define	CDPLAY_ENDOFDISC	0
;#define	CDFADE_CANCEL	0
;#define	CDFADE_PCM6	8
;#define	CDFADE_ADPCM6	10
;#define	CDFADE_PCM2	12
;#define	CDFADE_ADPCM2	14
;#define CDTRK_AUDIO	0
;#define CDTRK_DATA	4
;/*
; * ADPCM defines
; */
;#define	ADPLAY_AUTOSTOP		0
;#define	ADPLAY_REPEAT		0x80
;#define ADPLAY_FREQ_16KHZ	0xE
;#define ADPLAY_FREQ_10KHZ	0xD
;#define ADPLAY_FREQ_8KHZ	0xC
;#define ADPLAY_FREQ_6KHZ	0xB
;#define ADPLAY_FREQ_5KHZ	0xA
;#define ADREAD_RAM	0
;#define ADREAD_VRAM	0xFF
;#define ADWRITE_RAM	0
;#define ADWRITE_VRAM	0xFF
;void vsync(void);
;void satb_update(void);
;void __fastcall vsync(unsigned char num<acc>);
;void __fastcall satb_update(unsigned char max<acc>);
;void __fastcall vreg(unsigned char reg<acc>);
;void __fastcall vreg(unsigned char reg<__al>, unsigned int data<acc>);
;void __fastcall spr_hide(unsigned char num<acc>);
;void __fastcall spr_show(unsigned char num<acc>);
;void __fastcall set_map_pals(char far *pal<__bl:__si>);
;void set_map_tile_type(unsigned char);
;void set_map_tile_base(unsigned int vaddr);
;unsigned char mem_mapdatabank(unsigned char new_bank);
;unsigned int mem_mapdatabanks(unsigned int new_banks);
;void timer_set(unsigned char cnt);
;void timer_start(void);
;void timer_stop(void);
;unsigned char timer_get(void);
;void irq_enable(unsigned char irq);
;void irq_disable(unsigned char irq);
;#define STATUS_LINE   3
;   char glb_bal;
;   char chn_bal;
;   char ctrl;
;#asm
_beepsetup:
    lda #2
    sta psg_ch
    lda #$FF
    sta psg_mainvol
    lda #$1C	; 4KHz
    sta psg_freqlo
    stz psg_freqhi
    lda	#$0
    sta psg_ctrl
    lda #$1F
    ldx #16
.loop:
    sta psg_wavebuf
    dex
    bne .loop
    lda #$0
    ldx #16
.loop1:
    sta psg_wavebuf
    dex
    bne .loop1
    lda #$FF
    sta psg_pan
    lda #$9f
    sta psg_ctrl
    rts
_beepoff:
    lda #$0
    sta psg_ctrl
    rts
_beepon:
    lda #$9f
    sta psg_ctrl
    rts
;char a;
;main()
;{
	.proc _main
;   set_color(0,0);
	__ldwi	0
	__stw	color_reg
	__ldwi	0
	__stw	color_data
;   set_color(1,511);
	__ldwi	1
	__stw	color_reg
	__ldwi	511
	__stw	color_data
;   beepsetup();
	  call	_beepsetup
;   beepoff();
	  call	_beepoff
;   while (1) {
LL2:

	__ldwi	1
	__tstw
	__lbeq	LL3
;      vsync(0);
	__ldwi	0
	  call	_vsync.1
;      a = joy(0);
	__ldwi	0
	  call	_joy
	  stx	_a
;      if (a & JOY_DOWN) {
	__ldub	_a
	__andwi	64
	__tstw
	__lbeq	LL4
;         put_string("D", 1, STATUS_LINE);
	__ldwi	LL0+0
	__stw	__si
	__ldwi	1
	  stx	__bl
	__ldwi	3
	  call	_put_string.3
;	 ctrl = (ctrl & 0x80);
	__ldub	_ctrl
	__andwi	128
	  stx	_ctrl
;      } else {
	__lbra	LL5
LL4:

;         put_string(" ", 1, STATUS_LINE);
	__ldwi	LL0+2
	__stw	__si
	__ldwi	1
	  stx	__bl
	__ldwi	3
	  call	_put_string.3
;	 ctrl = (ctrl & 0x80) | 0x1f;
	__ldub	_ctrl
	__andwi	128
	__orwi	31
	  stx	_ctrl
;      }
LL5:

;      if (a & JOY_SEL) {
	__ldub	_a
	__andwi	4
	__tstw
	__lbeq	LL6
;         put_string("S", 2, STATUS_LINE);
	__ldwi	LL0+4
	__stw	__si
	__ldwi	2
	  stx	__bl
	__ldwi	3
	  call	_put_string.3
;	 ctrl = (ctrl & 0x1f);
	__ldub	_ctrl
	__andwi	31
	  stx	_ctrl
;      } else {
	__lbra	LL7
LL6:

;         put_string(" ", 2, STATUS_LINE);
	__ldwi	LL0+6
	__stw	__si
	__ldwi	2
	  stx	__bl
	__ldwi	3
	  call	_put_string.3
;	 ctrl = (ctrl & 0x1f) | 0x80;
	__ldub	_ctrl
	__andwi	31
	__orwi	128
	  stx	_ctrl
;      }
LL7:

;      if (a & JOY_II) {
	__ldub	_a
	__andwi	2
	__tstw
	__lbeq	LL8
;         put_string("2", 3, STATUS_LINE);
	__ldwi	LL0+8
	__stw	__si
	__ldwi	3
	  stx	__bl
	__ldwi	3
	  call	_put_string.3
;	 glb_bal = 0;
	__ldwi	0
	  stx	_glb_bal
;      } else {
	__lbra	LL9
LL8:

;         put_string(" ", 3, STATUS_LINE);
	__ldwi	LL0+10
	__stw	__si
	__ldwi	3
	  stx	__bl
	__ldwi	3
	  call	_put_string.3
;	 glb_bal = 255;
	__ldwi	255
	  stx	_glb_bal
;      }
LL9:

;      if (a & JOY_I) {
	__ldub	_a
	__andwi	1
	__tstw
	__lbeq	LL10
;         put_string("1", 4, STATUS_LINE);
	__ldwi	LL0+12
	__stw	__si
	__ldwi	4
	  stx	__bl
	__ldwi	3
	  call	_put_string.3
;	 chn_bal = 0;
	__ldwi	0
	  stx	_chn_bal
;      } else {
	__lbra	LL11
LL10:

;         put_string(" ", 4, STATUS_LINE);
	__ldwi	LL0+14
	__stw	__si
	__ldwi	4
	  stx	__bl
	__ldwi	3
	  call	_put_string.3
;	 chn_bal = 255;
	__ldwi	255
	  stx	_chn_bal
;      }
LL11:

;#asm
      lda _glb_bal
      sta psg_mainvol
      lda _chn_bal
      sta psg_pan
      lda _ctrl
      sta psg_ctrl
;   }
	__lbra	LL2
LL3:

;   return;
	__lbra	LL1
;}
LL1:

	  rts
	.endp

	.data
	.bank CONST_BANK
LL0:
	.db	68,0,32,0,83,0,32,0
	.db	50,0,32,0,49,0,32,0

	.bss
_glb_bal:		.ds	1
_chn_bal:		.ds	1
_ctrl:		.ds	1
_a:		.ds	1


;0 error(s) in compilation
;	literal pool:16
;	constant pool:0
;	global pool:31
;	Macro pool:81
huc_rodata:
__huc_rodata:
huc_rodata_end:
__huc_rodata_end:
huc_data:
__huc_data:
huc_data_end:
__huc_data_end:
__heap_start:
